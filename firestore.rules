
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get the user's role from their profile document
    function getUserRole(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      // Check if the document exists before accessing data
      return userDoc.exists ? userDoc.data.role : null;
    }

    // Helper function to check if the requesting user has a specific role
    function hasRole(role) {
      let userActualRole = getUserRole(request.auth.uid);
      return isAuthenticated() && userActualRole != null && userActualRole == role;
    }

    // Helper function to check if the user is the owner of the document (e.g. for their own profile)
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Products:
    match /products/{productId} {
      allow read: if isAuthenticated() && (hasRole('owner') || hasRole('admin') || hasRole('employee'));
      allow create, update, delete: if isAuthenticated() && (hasRole('owner') || hasRole('admin') || hasRole('employee'));
    }

    // Categories:
    match /categories/{categoryId} {
      allow read: if isAuthenticated() && (hasRole('owner') || hasRole('admin') || hasRole('employee'));
      allow create, update, delete: if isAuthenticated() && (hasRole('owner') || hasRole('admin') || hasRole('employee'));
    }

    // Customers:
    match /customers/{customerId} {
      allow read: if isAuthenticated() && (hasRole('owner') || hasRole('admin') || hasRole('employee'));
      allow create, update, delete: if isAuthenticated() && (hasRole('owner') || hasRole('admin') || hasRole('employee'));
    }

    // Orders:
    match /orders/{orderId} {
      allow read: if isAuthenticated() && (hasRole('owner') || hasRole('admin') || hasRole('employee'));
      allow create: if isAuthenticated() && (hasRole('owner') || hasRole('admin') || hasRole('employee'));
      allow update: if isAuthenticated() && hasRole('owner');
      allow delete: if isAuthenticated() && hasRole('owner');
    }

    // Users:
    match /users/{userId} {
      // Any authenticated user can read profiles that ARE owner profiles (for the client-side owner check).
      // Owners and Admins can read any profile.
      // Users can read their own profile.
      allow read: if isAuthenticated() && 
                    (
                      isOwner(userId) || 
                      hasRole('owner') || 
                      hasRole('admin') ||
                      (get(/databases/$(database)/documents/users/$(userId)).data.role == 'owner') // Allows reading any document if it's an owner's
                    );
      
      allow create: if isAuthenticated() && 
                    (
                      isOwner(userId) || // User creating their own profile
                      hasRole('owner') || // Owner creating a new user
                      (hasRole('admin') && request.resource.data.role == 'employee') // Admin creating an employee
                    );

      allow update: if isAuthenticated() && (
                    // User updating their own non-role fields
                    (isOwner(userId) && (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'mobileNumber', 'updatedAt']))) ||
                    // Owner managing roles/details (cannot change an owner's role to non-owner, cannot make someone else owner via edit)
                    (hasRole('owner') && userId != request.auth.uid && resource.data.role != 'owner' && request.resource.data.role != 'owner') ||
                    (hasRole('owner') && userId != request.auth.uid && resource.data.role == 'owner' && request.resource.data.role == 'owner' && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'mobileNumber', 'updatedAt'])) ||
                    // Admin managing roles/details (can demote other admin, can edit employee, cannot touch owner)
                    (hasRole('admin') && resource.data.role == 'employee' && request.resource.data.role == 'employee') ||
                    (hasRole('admin') && resource.data.role == 'admin' && userId != request.auth.uid && request.resource.data.role == 'employee') 
                  );

      allow delete: if isAuthenticated() && (
                      (hasRole('owner') && resource.data.role != 'owner' && userId != request.auth.uid) || // Owner can delete non-owners (not themselves)
                      (hasRole('admin') && resource.data.role == 'employee' && userId != request.auth.uid)    // Admin can delete employees (not themselves)
                    );
    }
  }
}

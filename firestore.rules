rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for individual user documents in the 'users' collection
    match /users/{userId} {
      // Allow a user to read, create (their own), and update their own profile
      allow get, create, update: if request.auth != null && request.auth.uid == userId;

      // Allow owner or admin to get any specific user's profile (for viewing details)
      allow get: if request.auth != null &&
                    request.auth.uid != null &&
                    exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                    (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner' ||
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      // Allow owner or admin to update other users' profiles (e.g., change role)
      // - Owners can update 'admin' or 'employee' roles.
      // - Admins can update 'employee' roles.
      // - Neither can change an 'owner' role through this.
      // - A user cannot change their own role through this cross-user update rule (covered by self-update above if needed, but role change is usually admin task).
      allow update: if request.auth != null &&
                      request.auth.uid != userId && // Not updating self through this rule
                      request.auth.uid != null &&
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      (
                        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner' && resource.data.role != 'owner') ||
                        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' && resource.data.role == 'employee' && resource.data.role != 'admin' && resource.data.role != 'owner')
                      );

      // Allow owner to delete 'admin' or 'employee' profiles.
      // Allow admin to delete 'employee' profiles.
      // Cannot delete 'owner' profiles through this.
      allow delete: if request.auth != null &&
                       request.auth.uid != null &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       (
                         (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner' && resource.data.role != 'owner') ||
                         (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' && resource.data.role == 'employee')
                       );
    }

    // Rule for the 'users' collection itself (for list/query operations)
    match /users {
      // Allow any authenticated user to list (query) users.
      // This is needed by AuthContext for the initial "first owner" check.
      // The User Management page (accessible by owner/admin) also lists users.
      // Client-side logic should further restrict who sees what based on role.
      allow list: if request.auth != null;
    }

    // Rules for 'products' collection
    match /products/{productId} {
      allow read, write: if request.auth != null; // Authenticated users can read/write
    }

    // Rules for 'categories' collection
    match /categories/{categoryId} {
      allow read, write: if request.auth != null; // Authenticated users can read/write
    }

    // Rules for 'customers' collection
    match /customers/{customerId} {
      allow read, write: if request.auth != null; // Authenticated users can read/write
    }

    // Rules for 'orders' collection
    match /orders/{orderId} {
      allow read, write: if request.auth != null; // Authenticated users can read/write
    }
  }
}

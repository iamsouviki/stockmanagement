
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection:
    // - Authenticated users can read their own profile.
    // - Any authenticated user can list users (e.g., for User Management by admin/owner).
    // - Users can create their own profile document upon signup.
    // - Users can update their own profile (e.g. displayName, mobileNumber).
    // - Only owners can delete user profiles (excluding their own).
    match /users/{userId} {
      allow read: if request.auth != null; // Allows listing and getting individual profiles for authenticated users
      allow create: if request.auth.uid == userId; // User can create their own profile
      allow update: if request.auth.uid == userId || 
                       (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner' && request.resource.data.role != 'owner') ||
                       (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' && 
                        request.resource.data.role == 'employee' && 
                        resource.data.role != 'owner' && // Admin cannot edit owner
                        resource.data.role != 'admin'); // Admin cannot make another admin an employee, but can edit employee
      allow delete: if request.auth.uid != userId && 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner' &&
                       resource.data.role != 'owner'; // Owner can delete others, but not other owners
    }

    // Categories collection:
    // - Authenticated users can read categories.
    // - Owner, Admin, or Employee can create, update, delete categories.
    match /categories/{categoryId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'admin', 'employee'];
    }

    // Products collection:
    // - Authenticated users can read products.
    // - Owner, Admin, or Employee can create, update, delete products.
    match /products/{productId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'admin', 'employee'];
    }

    // Customers collection:
    // - Authenticated users can read customers.
    // - Owner, Admin, or Employee can create, update, delete customers.
    match /customers/{customerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'admin', 'employee'];
    }

    // Orders collection:
    // - Authenticated users can read orders (for history).
    // - Owner, Admin, or Employee can create orders.
    // - Only Owner can update orders.
    // - Deletion of orders is disallowed for safety.
    match /orders/{orderId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'admin', 'employee'];
      allow update: if request.auth != null && 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner';
      allow delete: if false; // Generally, orders should not be deleted.
    }
  }
}

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has a specific role
    function hasRole(role) {
      // Check if the user's document exists and has the specified role
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc.data != null && userDoc.data.role == role;
    }

    // Helper function to check if the user is the owner of the document being accessed
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Products:
    match /products/{productId} {
      allow read: if request.auth != null && (hasRole('owner') || hasRole('admin') || hasRole('employee'));
      allow create, delete: if request.auth != null && (hasRole('owner') || hasRole('admin'));
      allow update: if request.auth != null && (hasRole('owner') || hasRole('admin') || hasRole('employee')); // Employee can update quantity
    }

    // Categories:
    match /categories/{categoryId} {
      allow read: if request.auth != null && (hasRole('owner') || hasRole('admin') || hasRole('employee'));
      allow create, update, delete: if request.auth != null && (hasRole('owner') || hasRole('admin'));
    }

    // Customers:
    match /customers/{customerId} {
      allow read, create: if request.auth != null && (hasRole('owner') || hasRole('admin') || hasRole('employee'));
      allow update, delete: if request.auth != null && (hasRole('owner') || hasRole('admin'));
    }

    // Orders:
    match /orders/{orderId} {
      allow read, create: if request.auth != null && (hasRole('owner') || hasRole('admin') || hasRole('employee'));
      allow update, delete: if request.auth != null && hasRole('owner');
    }

    // Users:
    match /users/{userId} {
      // Allow any authenticated user to read any user's profile.
      // This is necessary for the client-side logic that checks if an 'owner' exists
      // when a new user signs up. The app logic itself limits what data is shown based on role.
      allow read: if request.auth != null;

      // Allow a user to create their own profile document if it doesn't exist yet.
      // Also, allow existing 'owner' or 'admin' (to create employees) to create user profiles.
      allow create: if request.auth != null &&
                      (
                        (isOwner(userId) && !existsAfter()) || // User creating their own profile
                        hasRole('owner') || // Owner can create any user
                        (hasRole('admin') && request.resource.data.role == 'employee') // Admin can create employees
                      );

      // Allow users to update their own profile (app should restrict fields like 'role').
      // Allow 'owner' to update any user profile (except demoting other owners).
      // Allow 'admin' to update 'employee' or other 'admin' profiles (cannot promote to owner or demote owners).
      allow update: if request.auth != null &&
                      (
                        (isOwner(userId) && (request.resource.data.role == resource.data.role || !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']))) || // User updates self, role cannot change or is not in diff
                        (hasRole('owner') && (resource.data.role != 'owner' || request.resource.data.role == 'owner')) || // Owner updates others, cannot change an owner's role from 'owner'
                        (
                          hasRole('admin') &&
                          resource.data.role != 'owner' && // Admin cannot update an owner
                          request.resource.data.role != 'owner' && // Admin cannot promote to owner
                          (resource.data.role == 'employee' || (resource.data.role == 'admin' && request.resource.data.role == 'employee')) // Admin can update employee, or demote other admin to employee
                        )
                      );


      // Allow 'owner' to delete any user except another 'owner'.
      // Allow 'admin' to delete 'employee' users.
      allow delete: if request.auth != null &&
                      (
                        (hasRole('owner') && resource.data.role != 'owner') ||
                        (hasRole('admin') && resource.data.role == 'employee')
                      );
    }
  }
}

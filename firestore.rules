rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user's role from their profile document
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Helper function to check if the requesting user is an owner
    function isOwner() {
      return request.auth != null && getUserRole(request.auth.uid) == 'owner';
    }

    // Helper function to check if the requesting user is an admin
    function isAdmin() {
      return request.auth != null && getUserRole(request.auth.uid) == 'admin';
    }

    // Helper function to check if the requesting user is an employee
    function isEmployee() {
      return request.auth != null && getUserRole(request.auth.uid) == 'employee';
    }

    // Users collection
    match /users/{userId} {
      // Allow authenticated users to read their own profile
      // Allow owner/admin to read any user profile (for user management, AuthContext owner check)
      allow get: if request.auth != null && (request.auth.uid == userId || isOwner() || isAdmin());

      // Allow authenticated 'owner' or 'admin' to list users (for user management page)
      // Also allow any authenticated user to list users if the query is specifically for checking owner existence (AuthContext)
      // This rule is a bit more complex; a simpler alternative might be `allow list: if request.auth != null;` if strictly needed and other collections are locked down.
      allow list: if request.auth != null && (
                    (isOwner() || isAdmin()) ||
                    (request.query.resource.data.role == 'owner' && request.query.limit == 1) // For AuthContext owner check
                  );

      // Allow a user to create their own profile document (AuthContext initial profile creation)
      // Or an owner/admin to create new users
      allow create: if request.auth != null && (
                      (request.auth.uid == userId && !exists(/databases/$(database)/documents/users/$(userId))) || // User creating their own if not exists
                      isOwner() ||
                      isAdmin()
                    );

      // Allow a user to update their own profile (specific fields, role change handled by backend logic or stricter rules)
      // Allow owner/admin to update profiles (role change restrictions are also in backend logic)
      allow update: if request.auth != null &&
                       (request.auth.uid == userId || isOwner() || isAdmin());
                       // Note: Ensure backend logic validates role changes based on who is making the request.

      // Allow owner to delete users (except themselves)
      // Admin can delete employees (except themselves or other admins)
      allow delete: if request.auth != null &&
                       (isOwner() && request.auth.uid != userId) ||
                       (isAdmin() && request.auth.uid != userId && getUserRole(userId) == 'employee');
    }

    // Categories collection
    match /categories/{categoryId} {
      allow read: if request.auth != null; // All authenticated users can read
      allow write: if request.auth != null && (isOwner() || isAdmin() || isEmployee()); // Owner, Admin, Employee can write
    }

    // Products collection
    match /products/{productId} {
      allow read: if request.auth != null; // All authenticated users can read
      allow write: if request.auth != null && (isOwner() || isAdmin() || isEmployee()); // Owner, Admin, Employee can write
    }

    // Customers collection
    match /customers/{customerId} {
      allow read: if request.auth != null; // All authenticated users can read
      allow write: if request.auth != null && (isOwner() || isAdmin() || isEmployee()); // Owner, Admin, Employee can write
    }

    // Orders collection
    match /orders/{orderId} {
      allow read: if request.auth != null; // All authenticated users can read orders
      allow create: if request.auth != null && (isOwner() || isAdmin() || isEmployee()); // Owner, Admin, Employee can create
      allow update: if request.auth != null && isOwner(); // Only owner can update
      allow delete: if false; // Generally, orders shouldn't be deleted. Change to `isOwner()` if needed.
    }
  }
}

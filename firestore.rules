
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    // - Authenticated users can read their own profile.
    // - Authenticated users can create their own profile document (e.g., on first sign-up).
    // - Authenticated users can update their own profile (except for the 'role' field).
    // - Only 'owner' can delete user profiles (except their own, which they shouldn't do via app).
    // - Any authenticated user can list users (e.g., for admin panels, owner check in AuthContext).
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId && !(request.resource.data.role != resource.data.role); // Prevent user from changing their own role
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner' && request.auth.uid != userId;
    }

    // Categories Collection
    // - Authenticated users can read categories.
    // - 'owner', 'admin', or 'employee' can create, update, and delete categories.
    match /categories/{categoryId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'admin', 'employee'];
    }

    // Products Collection
    // - Authenticated users can read products.
    // - 'owner', 'admin', or 'employee' can create, update, and delete products.
    match /products/{productId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'admin', 'employee'];
    }

    // Customers Collection
    // - Authenticated users can read customers.
    // - 'owner', 'admin', or 'employee' can create and update customers.
    // - Only 'owner' or 'admin' can delete customers. (Adjust if employees should also delete)
    match /customers/{customerId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && 
                                get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'admin', 'employee'];
      allow delete: if request.auth != null && 
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'admin'];
    }

    // Orders Collection
    // - Authenticated users can read orders (e.g., for their own history if implemented, or for admins/employees).
    // - 'owner', 'admin', or 'employee' can create orders.
    // - Only 'owner' can update orders.
    // - Deletion of orders is typically restricted (e.g., to 'owner' or not allowed at all).
    match /orders/{orderId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'admin', 'employee'];
      allow update: if request.auth != null && 
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner';
      allow delete: if request.auth != null &&
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner'; // Or set to false
    }
  }
}

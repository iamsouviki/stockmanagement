rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection:
    // - Allow a user to read their own document.
    // - Allow a user to create their own document (for initial profile setup if it doesn't exist).
    // - Allow a user to update their own document.
    // - More specific rules for admin/owner to manage other users will be layered on top.
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      // Listing users or deleting users by admin/owner needs separate, more privileged rules.
      // Example for listing: allow list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'admin'];
    }

    // Categories:
    // - Allow anyone to read categories.
    // - Allow authenticated users with 'owner', 'admin', or 'employee' roles to write categories.
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'admin', 'employee'];
    }

    // Products:
    // - Allow anyone to read products.
    // - Allow authenticated users with 'owner', 'admin', or 'employee' roles to write products.
    match /products/{productId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'admin', 'employee'];
    }

    // Customers:
    // - Allow authenticated users to read and write customer data.
    match /customers/{customerId} {
      allow read, write: if request.auth != null;
      // Deletion can be restricted to 'owner'
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner';
    }

    // Orders:
    // - Allow authenticated users to read and create orders.
    // - Allow 'owner' to update/delete orders.
    match /orders/{orderId} {
      allow read, create: if request.auth != null;
      allow update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner';
    }

    // It's good practice to have a default deny for any paths not explicitly matched,
    // but let's ensure the above rules are working first.
    // match /{document=**} {
    //  allow read, write: if false;
    // }
  }
}

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection
    // - Authenticated users can read their own profile and the profiles of others (for owner check and user management).
    // - Authenticated users can create their own profile.
    // - Authenticated users can update their own profile (excluding role).
    // - Only owners can delete user profiles (except their own).
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      // User can update their own displayName or mobileNumber. Role updates are handled by specific logic.
      allow update: if request.auth != null && request.auth.uid == userId &&
                       !(request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'email', 'createdAt']));
      // Owner can update other users' roles (displayName, mobileNumber, role)
      allow update: if request.auth != null &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner' &&
                       request.auth.uid != userId;
      // Admin can update 'employee' roles or other 'admin' roles to 'employee'
      allow update: if request.auth != null &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
                       request.auth.uid != userId &&
                       resource.data.role != 'owner' && // Admin cannot edit owner
                       (request.resource.data.role == 'employee' || (resource.data.role == 'admin' && request.resource.data.role == 'admin'));


      allow delete: if request.auth != null &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner' &&
                       request.auth.uid != userId; // Owner cannot delete themselves
    }

    // Categories collection
    // - All authenticated users can read categories.
    // - Owner, Admin, Employee can create, update, delete categories.
    match /categories/{categoryId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'admin', 'employee'];
    }

    // Products collection
    // - All authenticated users can read products.
    // - Owner, Admin, Employee can create, update, delete products.
    match /products/{productId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'admin', 'employee'];
    }

    // Customers collection
    // - All authenticated users can read customers.
    // - Owner, Admin, Employee can create, update, delete customers.
    match /customers/{customerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'admin', 'employee'];
    }

    // Orders collection
    // - Authenticated users can read orders.
    // - Owner, Admin, Employee can create orders.
    // - Only Owner can update orders.
    // - Deletion of orders is generally disallowed.
    match /orders/{orderId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'admin', 'employee'];
      allow update: if request.auth != null &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner';
      allow delete: if false; // Explicitly disallow deletion
    }
  }
}

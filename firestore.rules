
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get the role of the currently authenticated user
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Users collection
    // - Users can read their own profile.
    // - Users can create their own profile document upon signup (AuthContext handles this).
    // - Users can update their own non-sensitive profile data (e.g., displayName, mobileNumber).
    // - Only 'owner' can update another user's role (or other sensitive data).
    // - Only 'owner' can delete users (except themselves or other owners).
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || getUserRole(request.auth.uid) == 'owner' || getUserRole(request.auth.uid) == 'admin');
      allow create: if request.auth != null && request.auth.uid == userId; // User creating their own profile doc
      allow update: if request.auth != null &&
                       ( (request.auth.uid == userId && !( 'role' in request.resource.data && request.resource.data.role != resource.data.role ) ) || // User updates own, but not role
                         (getUserRole(request.auth.uid) == 'owner' && userId != request.auth.uid && resource.data.role != 'owner') || // Owner updates others (not owner)
                         (getUserRole(request.auth.uid) == 'admin' && userId != request.auth.uid && resource.data.role == 'employee' && request.resource.data.role == 'employee') // Admin updates employee (no role change)
                       );
      allow delete: if request.auth != null &&
                       getUserRole(request.auth.uid) == 'owner' &&
                       userId != request.auth.uid && resource.data.role != 'owner'; // Owner can delete non-owner users
    }

    // Allows authenticated users to query the users collection (e.g., for AuthContext owner check)
    match /users/{document=**} {
      allow list: if request.auth != null;
    }

    // Categories collection
    // - Authenticated users can read categories.
    // - 'owner', 'admin', 'employee' can create, update, delete categories.
    match /categories/{categoryId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && getUserRole(request.auth.uid) in ['owner', 'admin', 'employee'];
    }

    // Products collection
    // - Authenticated users can read products.
    // - 'owner', 'admin', 'employee' can create, update, delete products.
    match /products/{productId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && getUserRole(request.auth.uid) in ['owner', 'admin', 'employee'];
    }

    // Customers collection
    // - Authenticated users can read customers.
    // - 'owner', 'admin', 'employee' can create, update, delete customers.
    match /customers/{customerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && getUserRole(request.auth.uid) in ['owner', 'admin', 'employee'];
    }

    // Orders collection
    // - Authenticated users can read orders.
    // - 'owner', 'admin', 'employee' can create orders.
    // - Only 'owner' can update orders.
    // - Deletion of orders is generally restricted (set to false, can be changed if needed).
    match /orders/{orderId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && getUserRole(request.auth.uid) in ['owner', 'admin', 'employee'];
      allow update: if request.auth != null && getUserRole(request.auth.uid) == 'owner';
      allow delete: if request.auth != null && getUserRole(request.auth.uid) == 'owner'; // Or set to false if deletion is not allowed
    }
  }
}

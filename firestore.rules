
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user's role
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Users collection
    match /users/{userId} {
      // Allow anyone to create their own user document (e.g., on sign up)
      // Allow authenticated users to read any user profile (e.g., for AuthContext owner check)
      // Allow users to read their own document
      allow read: if request.auth != null;
      
      // Allow users to create their own profile document
      allow create: if request.auth.uid == userId;
      
      // Allow users to update their own profile (except role, unless they are owner/admin changing others)
      allow update: if request.auth.uid == userId && !(request.resource.data.role != resource.data.role)
                   || (request.auth.uid == userId && (getUserRole(request.auth.uid) == 'owner' || getUserRole(request.auth.uid) == 'admin'))
                   || (request.auth.uid != userId && getUserRole(request.auth.uid) == 'owner')
                   || (request.auth.uid != userId && getUserRole(request.auth.uid) == 'admin' && request.resource.data.role == 'employee' && resource.data.role != 'owner');

      // Only owners can delete other user profiles (except their own)
      // Admins can delete employee profiles
      allow delete: if request.auth.uid != userId &&
                       (getUserRole(request.auth.uid) == 'owner' && resource.data.role != 'owner' ||
                        getUserRole(request.auth.uid) == 'admin' && resource.data.role == 'employee');
    }

    // Categories collection
    match /categories/{categoryId} {
      allow read: if request.auth != null; // All authenticated users can read
      allow write: if request.auth != null && // create, update, delete
                      (getUserRole(request.auth.uid) == 'owner' || 
                       getUserRole(request.auth.uid) == 'admin' || 
                       getUserRole(request.auth.uid) == 'employee');
    }

    // Products collection
    match /products/{productId} {
      allow read: if request.auth != null; // All authenticated users can read
      allow write: if request.auth != null && // create, update, delete
                      (getUserRole(request.auth.uid) == 'owner' || 
                       getUserRole(request.auth.uid) == 'admin' || 
                       getUserRole(request.auth.uid) == 'employee');
    }

    // Customers collection
    match /customers/{customerId} {
      allow read: if request.auth != null; // All authenticated users can read
      allow write: if request.auth != null && // create, update, delete
                      (getUserRole(request.auth.uid) == 'owner' || 
                       getUserRole(request.auth.uid) == 'admin' || 
                       getUserRole(request.auth.uid) == 'employee');
    }

    // Orders collection
    match /orders/{orderId} {
      allow read: if request.auth != null; // All authenticated users can read their orders or all orders depending on app logic
      
      // Create order: owner, admin, employee
      allow create: if request.auth != null && 
                       (getUserRole(request.auth.uid) == 'owner' || 
                        getUserRole(request.auth.uid) == 'admin' || 
                        getUserRole(request.auth.uid) == 'employee');
      
      // Update order: only owner
      allow update: if request.auth != null && 
                       getUserRole(request.auth.uid) == 'owner';
      
      // Delete order: generally not recommended, but if needed, only owner
      allow delete: if request.auth != null && 
                       getUserRole(request.auth.uid) == 'owner';
    }
  }
}

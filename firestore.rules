
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get the user's role from their profile document
    // Gracefully handles cases where the user document might not exist yet.
    function getUserRole(userId) {
      let userDoc = getAfter(/databases/$(database)/documents/users/$(userId)); // Use getAfter for writes if checking future state
      if (!exists(/databases/$(database)/documents/users/$(userId))) { // Check current existence for reads
          userDoc = get(/databases/$(database)/documents/users/$(userId)); // Fallback for pure reads
      }
      return userDoc.data.role;
    }
    
    function isRequestingUserOwner() {
      return isAuthenticated() && getUserRole(request.auth.uid) == 'owner';
    }

    function isRequestingUserAdmin() {
      return isAuthenticated() && getUserRole(request.auth.uid) == 'admin';
    }

    function isRequestingUserEmployee() {
      return isAuthenticated() && getUserRole(request.auth.uid) == 'employee';
    }

    // Users collection
    match /users/{userId} {
      // Allow creating own user profile if authenticated and UID matches.
      // Role setting logic is primarily in AuthContext, but rule ensures basic validity.
      allow create: if isAuthenticated() && request.auth.uid == userId &&
                      (request.resource.data.role == 'owner' || request.resource.data.role == 'admin' || request.resource.data.role == 'employee');

      // Allow reading own profile.
      // Allow owner or admin to read any user profile.
      allow read: if isAuthenticated() && 
                    (request.auth.uid == userId || isRequestingUserOwner() || isRequestingUserAdmin());
      
      // Allow any authenticated user to list users.
      // This is needed for AuthContext to check if an owner exists during initial signup.
      // And for User Management page for owners/admins.
      // Individual document reads within the list are still governed by the `read` rule above.
      allow list: if isAuthenticated();

      // Allow updating user profiles with role-based restrictions.
      allow update: if isAuthenticated() &&
                      (
                        // Owner can update any profile, but cannot change an existing owner's role.
                        (isRequestingUserOwner() && (resource.data.role != 'owner' || request.resource.data.role == 'owner')) ||
                        // Admin can update non-owner profiles, cannot make anyone an owner.
                        // Admin cannot change their own role or another admin's role to owner.
                        (isRequestingUserAdmin() && resource.data.role != 'owner' && request.resource.data.role != 'owner') ||
                        // Users can update their own displayName and mobileNumber, but not their role or email.
                        (request.auth.uid == userId &&
                         request.resource.data.role == resource.data.role &&
                         request.resource.data.email == resource.data.email &&
                         !('createdAt' in request.resource.data.diff(resource.data).affectedKeys()))
                      );
                      
      // Allow deleting user profiles with role-based restrictions.
      allow delete: if isAuthenticated() &&
                      (
                        // Owner can delete any non-owner profile.
                        (isRequestingUserOwner() && resource.data.role != 'owner') ||
                        // Admin can delete employee profiles.
                        (isRequestingUserAdmin() && resource.data.role == 'employee')
                      );
    }

    // Categories collection
    match /categories/{categoryId} {
      allow read: if isAuthenticated(); 
      allow list: if isAuthenticated();
      allow create, update, delete: if isRequestingUserOwner() || isRequestingUserAdmin() || isRequestingUserEmployee();
    }

    // Products collection
    match /products/{productId} {
      allow read: if isAuthenticated();
      allow list: if isAuthenticated();
      allow create, update, delete: if isRequestingUserOwner() || isRequestingUserAdmin() || isRequestingUserEmployee();
    }

    // Customers collection
    match /customers/{customerId} {
      allow read: if isAuthenticated();
      allow list: if isAuthenticated();
      allow create, update, delete: if isRequestingUserOwner() || isRequestingUserAdmin() || isRequestingUserEmployee();
    }

    // Orders collection
    match /orders/{orderId} {
      allow read: if isAuthenticated();
      allow list: if isAuthenticated();
      allow create: if isRequestingUserOwner() || isRequestingUserAdmin() || isRequestingUserEmployee();
      allow update: if isRequestingUserOwner() || isRequestingUserAdmin(); 
      allow delete: if isRequestingUserOwner();
    }
  }
}

    
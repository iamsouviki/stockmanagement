rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user role
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is an owner
    function isOwner(userId) {
      return isAuthenticated() && getUserRole(userId) == 'owner';
    }

    // Helper function to check if the user is an admin
    function isAdmin(userId) {
      return isAuthenticated() && getUserRole(userId) == 'admin';
    }

    // Helper function to check if the user is an employee
    function isEmployee(userId) {
      return isAuthenticated() && getUserRole(userId) == 'employee';
    }

    // Users collection
    // - All authenticated users can read their own profile.
    // - Owners can read all user profiles.
    // - Users can create their own profile upon signup.
    // - Users can update their own profile (e.g. displayName, mobileNumber).
    // - Owners can update any user's role (except another owner's role, or their own to non-owner).
    // - Admins can update employee roles to employee.
    // - Owners can delete any non-owner user.
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isOwner(request.auth.uid));
      allow list: if isOwner(request.auth.uid) || isAdmin(request.auth.uid); // Owners and Admins can list users
      allow create: if request.auth.uid == userId; // User creates their own profile
      allow update: if isAuthenticated() &&
                      (
                        // User updating their own non-role fields
                        (request.auth.uid == userId && !(request.resource.data.role != resource.data.role)) ||
                        // Owner updating roles (with restrictions)
                        (isOwner(request.auth.uid) && request.auth.uid != userId && resource.data.role != 'owner' && (request.resource.data.role == 'admin' || request.resource.data.role == 'employee')) ||
                        // Admin updating another admin's role to employee, or employee to employee
                        (isAdmin(request.auth.uid) && request.auth.uid != userId && resource.data.role != 'owner' &&
                         ((resource.data.role == 'admin' && request.resource.data.role == 'employee') || (resource.data.role == 'employee' && request.resource.data.role == 'employee'))
                        )
                      );
      allow delete: if isOwner(request.auth.uid) && request.auth.uid != userId && resource.data.role != 'owner';
    }

    // Categories collection
    // - All authenticated users can read categories.
    // - Authenticated users (owner, admin, employee) can create, update, delete categories.
    match /categories/{categoryId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (isOwner(request.auth.uid) || isAdmin(request.auth.uid) || isEmployee(request.auth.uid));
    }

    // Products collection
    // - All authenticated users can read products.
    // - Authenticated users (owner, admin, employee) can create, update, delete products (stock updates happen here).
    match /products/{productId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (isOwner(request.auth.uid) || isAdmin(request.auth.uid) || isEmployee(request.auth.uid));
    }

    // Customers collection
    // - All authenticated users can read customers.
    // - Authenticated users (owner, admin, employee) can create, update customers.
    // - Only owners can delete customers.
    match /customers/{customerId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && (isOwner(request.auth.uid) || isAdmin(request.auth.uid) || isEmployee(request.auth.uid));
      allow delete: if isOwner(request.auth.uid);
    }

    // Orders collection
    // - Authenticated users (owner, admin, employee) can read orders.
    // - Authenticated users (owner, admin, employee) can create new orders.
    // - Only owners can update existing orders.
    // - Only owners can delete orders.
    match /orders/{orderId} {
      allow read: if isAuthenticated() && (isOwner(request.auth.uid) || isAdmin(request.auth.uid) || isEmployee(request.auth.uid));
      allow create: if isAuthenticated() && (isOwner(request.auth.uid) || isAdmin(request.auth.uid) || isEmployee(request.auth.uid));
      allow update: if isOwner(request.auth.uid);
      allow delete: if isOwner(request.auth.uid);
    }
  }
}


rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user's role
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is an owner
    function isOwner() {
      return isAuthenticated() && getUserRole(request.auth.uid) == 'owner';
    }

    // Helper function to check if user is an admin
    function isAdmin() {
      return isAuthenticated() && getUserRole(request.auth.uid) == 'admin';
    }

    // Helper function to check if user is an employee
    function isEmployee() {
      return isAuthenticated() && getUserRole(request.auth.uid) == 'employee';
    }

    // Users collection
    match /users/{userId} {
      // Authenticated users can read their own profile
      allow get: if isAuthenticated() && request.auth.uid == userId;
      // Owners and Admins can list/read all user profiles
      allow list, read: if isAuthenticated() && (isOwner() || isAdmin());
      // New authenticated users can create their own profile document
      allow create: if isAuthenticated() && request.auth.uid == userId;
      // Users can update their own displayName and mobileNumber.
      // Owners can update any user's displayName, mobileNumber, and role (except demoting another owner or making someone an owner).
      // Admins can update employee's displayName, mobileNumber. Admins can demote other admins to employees.
      allow update: if isAuthenticated() && (
        (request.auth.uid == userId && (request.resource.data.keys().hasOnly(['displayName', 'mobileNumber', 'updatedAt']) || request.resource.data.keys().hasOnly(['displayName', 'updatedAt']) || request.resource.data.keys().hasOnly(['mobileNumber', 'updatedAt']))) || // User updating their own limited fields
        (isOwner() && userId != request.auth.uid && !(resource.data.role == 'owner' && request.resource.data.role != 'owner') && request.resource.data.role != 'owner') || // Owner updating others (not demoting owner, not making new owner)
        (isAdmin() && userId != request.auth.uid && resource.data.role == 'employee' && request.resource.data.role == 'employee' && (request.resource.data.keys().hasOnly(['displayName', 'mobileNumber', 'role', 'updatedAt']) || request.resource.data.keys().hasOnly(['displayName', 'role', 'updatedAt']) || request.resource.data.keys().hasOnly(['mobileNumber', 'role', 'updatedAt']))) || // Admin updating employee
        (isAdmin() && userId != request.auth.uid && resource.data.role == 'admin' && request.resource.data.role == 'employee') // Admin demoting another admin
      );
      // Owners can delete any user except themselves or other owners.
      // Admins can delete employees.
      allow delete: if isAuthenticated() && (
        (isOwner() && userId != request.auth.uid && resource.data.role != 'owner') ||
        (isAdmin() && userId != request.auth.uid && resource.data.role == 'employee')
      );
    }

    // Products, Categories, Customers:
    // Readable by any authenticated user.
    // Writable (create, update, delete) by employee, admin, or owner.
    match /{collectionName}/{docId}
      where collectionName in ['products', 'categories', 'customers'] {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (isEmployee() || isAdmin() || isOwner());
    }

    // Orders:
    // Readable by any authenticated user.
    // Creatable by employee, admin, or owner.
    // Updatable only by owner.
    // Deletion of orders is generally not recommended for history; if needed, restrict to owner.
    match /orders/{orderId} {
      allow read, create: if isAuthenticated() && (isEmployee() || isAdmin() || isOwner());
      allow update: if isAuthenticated() && isOwner();
      // allow delete: if isAuthenticated() && isOwner(); // Uncomment if order deletion is required
    }
  }
}

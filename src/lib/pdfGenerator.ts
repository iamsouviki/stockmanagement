import jsPDF from 'jspdf';
import { format } from 'date-fns';
import type { Order, StoreDetails } from '@/types';
import { Timestamp } from 'firebase/firestore';

function formatDateForPdf(dateValue: Timestamp | string | Date | undefined | null) {
  if (!dateValue) return 'N/A';
  let dateToFormat: Date;

  if (dateValue instanceof Timestamp) {
    try {
      dateToFormat = dateValue.toDate();
    } catch (e) {
      console.error("Error converting Firestore Timestamp to Date:", e, dateValue);
      return 'Invalid Date';
    }
  } else if (dateValue instanceof Date) {
    dateToFormat = dateValue;
  } else if (typeof dateValue === 'string') {
    dateToFormat = new Date(dateValue);
  } else {
    console.warn("Unknown date type in formatDateForPdf:", dateValue);
    return 'N/A';
  }

  try {
    if (isNaN(dateToFormat.getTime())) {
      console.warn("Invalid date created in formatDateForPdf:", dateValue, "Resulted in:", dateToFormat);
      return 'Invalid Date';
    }
    return `${format(dateToFormat, 'MMM dd, yyyy hh:mm:ss a')} IST`;
  } catch (e) {
    console.error("Error formatting date in formatDateForPdf:", e, dateToFormat);
    return 'Error Date';
  }
}

export function generateInvoicePdf(
  order: Order,
  storeDetails: StoreDetails,
  currentUser: String,
) {
  const doc = new jsPDF({ orientation: 'p', unit: 'mm', format: 'a4' });
  
  const pageHeight = doc.internal.pageSize.getHeight();
  const pageWidth = doc.internal.pageSize.getWidth();
  const margin = 5; // 20px â‰ˆ 5mm
  const contentWidth = pageWidth - (margin * 2);
  let yPos = margin + 10; // Extra 10mm space at page start
  const taxRate = 0.18;
  let pageSubtotals: number[] = []; // Explicitly type as number array
  let currentPageSubtotal = 0; // Subtotal for the current page
  let currentPage = 1; // Track current page number

  const drawHeader = () => {
    doc.setFontSize(18);
    doc.setFont('helvetica', 'bold');
    doc.text(storeDetails.name, pageWidth / 2, yPos, { align: 'center' });
    yPos += 6;
    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    doc.text(storeDetails.storeType, pageWidth / 2, yPos, { align: 'center' });
    yPos += 4;
    doc.setFontSize(8);
    const storeAddressLines = doc.splitTextToSize(storeDetails.address, contentWidth * 0.8);
    doc.text(storeAddressLines, pageWidth / 2, yPos, { align: 'center' });
    yPos += 4;
    doc.text(`GSTIN: ${storeDetails.gstNo}`, pageWidth / 2, yPos, { align: 'center' });
    yPos += 4;

    doc.setFontSize(8);
    const contactParts = storeDetails.contact.split('|').map(part => part.trim());
    contactParts.forEach(part => {
      doc.text(part, pageWidth / 2, yPos, { align: 'center' });
      yPos += 4;
    });

    doc.setLineWidth(0.3);
    doc.line(margin, yPos, pageWidth - margin, yPos);
    yPos += 4;

    yPos += 3;

    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('INVOICE', pageWidth / 2, yPos, { align: 'center' });
    yPos += 6;

    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    doc.text(`Order No: ${order.orderNumber}`, margin, yPos);
    doc.text(`Date: ${formatDateForPdf(order.orderDate)}`, pageWidth - margin, yPos, { align: 'right' });
    yPos += 4;
    doc.text(`Customer: ${order.customerName || 'N/A'}`, margin, yPos);
    doc.text(`Generated by: ${currentUser}`, pageWidth - margin, yPos, { align: 'right' });
    yPos += 4;
    doc.text(`Mobile: ${order.customerMobile || 'N/A'}`, margin, yPos);
    yPos += 4;
    if (order.customerAddress) {
      doc.setFontSize(8);
      const addressText = `Address: ${order.customerAddress}`;
      const customerAddressLines = doc.splitTextToSize(addressText, contentWidth / 2);
      doc.text(customerAddressLines, margin, yPos);
      yPos += customerAddressLines.length * doc.getLineHeight();
      doc.setFontSize(9);
    } else {
      doc.text(`Address: N/A`, margin, yPos);
      yPos += 4;
    }
    yPos += 2;
  };

  const snoColWidth = contentWidth * 0.08;
  const productColWidth = contentWidth * 0.28;
  const snBarcodeColWidth = contentWidth * 0.18;
  const qtyColWidth = contentWidth * 0.08;
  const priceColWidth = contentWidth * 0.18;
  const itemSubtotalColWidth = contentWidth * 0.20;
  
  const colStartX = {
    sno: margin,
    productName: margin + snoColWidth,
    snBarcode: margin + snoColWidth + productColWidth,
    qty: margin + snoColWidth + productColWidth + snBarcodeColWidth,
    price: margin + snoColWidth + productColWidth + snBarcodeColWidth + qtyColWidth,
    subtotal: margin + snoColWidth + productColWidth + snBarcodeColWidth + qtyColWidth + priceColWidth,
  };

  const drawTableHeaders = () => {
    yPos += 1;
    doc.setLineWidth(0.1);
    doc.line(margin, yPos, pageWidth - margin, yPos);
    yPos += 4;
    doc.setFontSize(9);
    doc.setFont('helvetica', 'bold');
    doc.text('', colStartX.sno + snoColWidth / 2, yPos, { align: 'center' });
    doc.text('Product Name', colStartX.productName + productColWidth / 2, yPos, { align: 'center' });
    doc.text('S/N', colStartX.snBarcode + snBarcodeColWidth / 2, yPos, { align: 'center' });
    doc.text('Qty', colStartX.qty + qtyColWidth / 2, yPos, { align: 'center' });
    doc.text('Price', colStartX.price + priceColWidth / 2, yPos, { align: 'center' });
    doc.text('Subtotal', colStartX.subtotal + itemSubtotalColWidth / 2, yPos, { align: 'center' });
    yPos += 4;
    doc.line(margin, yPos, pageWidth - margin, yPos);
    yPos += 4;
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(8);
  };

  drawHeader();
  drawTableHeaders();

  doc.setFontSize(9);
  doc.setFont('helvetica', 'normal');
  const summaryLabelX = margin + contentWidth * 0.55;

  order.items.forEach((item, index) => {
    const itemLineHeight = doc.getLineHeight();
    const productNameLines = doc.splitTextToSize(item.name, productColWidth - 2);
    const snBarcodeText = item.serialNumber || item.barcode || 'N/A';
    const snBarcodeLines = doc.splitTextToSize(snBarcodeText, snBarcodeColWidth - 2);
    const maxLinesPerItem = Math.max(productNameLines.length, snBarcodeLines.length, 1);
    const itemBlockHeight = maxLinesPerItem * itemLineHeight;

    if (yPos + itemBlockHeight + 2.3 + 10 > pageHeight - (margin + 30)) { // Reserve space for page subtotal
      // Draw page subtotal only for non-last pages of multi-page invoices
      if (currentPage > 1 || order.items.length - (index + 1) > 0) {
        pageSubtotals.push(currentPageSubtotal);
        doc.setFontSize(9);
        doc.setFont('helvetica', 'normal');
        doc.setLineWidth(0.1);
        doc.line(summaryLabelX - 2, yPos, pageWidth - margin, yPos);
        yPos += 4;
        doc.text('Page Subtotal:', summaryLabelX, yPos, { align: 'left' });
        doc.text(`Rs. ${currentPageSubtotal.toFixed(2)}`, colStartX.subtotal + itemSubtotalColWidth / 2, yPos, { align: 'center' });
        yPos += 4;
      }
      // Move to new page
      doc.addPage();
      currentPage++;
      yPos = margin + 10;
      drawHeader();
      drawTableHeaders();
      doc.setFontSize(8);
      currentPageSubtotal = 0; // Reset for new page
    }
    const currentItemY = yPos;
    doc.text((index + 1).toString(), colStartX.sno + snoColWidth / 2, currentItemY, { align: 'center' });
    doc.text(productNameLines, colStartX.productName + productColWidth / 2, currentItemY, { align: 'center' });
    doc.text(snBarcodeLines, colStartX.snBarcode + snBarcodeColWidth / 2, currentItemY, { align: 'center' });
    doc.text(item.billQuantity.toString(), colStartX.qty + qtyColWidth / 2, currentItemY, { align: 'center' });
    doc.text(`Rs. ${(item.price).toFixed(2)}`, colStartX.price + priceColWidth / 2, currentItemY, { align: 'center' });
    const itemSubtotal = item.price * item.billQuantity;
    doc.text(`Rs. ${itemSubtotal.toFixed(2)}`, colStartX.subtotal + itemSubtotalColWidth / 2, currentItemY, { align: 'center' });
    currentPageSubtotal += itemSubtotal;
    yPos += maxLinesPerItem * 4 + 2.3;
  });

  // Summary Section (only on the last page)
  const summarySectionHeight = 25;
  if (yPos + summarySectionHeight > pageHeight - (margin + 30)) {
    doc.addPage();
    currentPage++;
    yPos = margin + 10;
    drawHeader();
  }

  doc.setLineWidth(0.1);
  doc.line(margin, yPos, pageWidth - margin, yPos);
  yPos += 4;
  doc.setFontSize(9);
  doc.setFont('helvetica', 'normal');
  doc.text('Subtotal:', summaryLabelX, yPos, { align: 'left' });
  doc.setFont('helvetica', 'bold');
  doc.text(`Rs. ${order.subtotal.toFixed(2)}`, colStartX.subtotal + itemSubtotalColWidth / 2, yPos, { align: 'center' });
  yPos += 4;
  doc.setFont('helvetica', 'normal');
  doc.text(`GST (${(taxRate * 100).toFixed(0)}%):`, summaryLabelX, yPos, { align: 'left' });
  doc.setFont('helvetica', 'bold');
  doc.text(`Rs. ${order.taxAmount.toFixed(2)}`, colStartX.subtotal + itemSubtotalColWidth / 2, yPos, { align: 'center' });
  yPos += 4;
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.line(summaryLabelX - 2, yPos, pageWidth - margin, yPos);
  yPos += 4;
  doc.text('Total Amount:', summaryLabelX, yPos, { align: 'left' });
  doc.setFont('helvetica', 'bold');
  doc.text(`Rs. ${order.totalAmount.toFixed(2)}`, colStartX.subtotal + itemSubtotalColWidth / 2, yPos, { align: 'center' });

  // Footer with Page Numbering
  const pageCount = currentPage; // Use the actual number of pages created
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    const footerY = pageHeight - margin - 2;
    doc.setFontSize(7);
    doc.setFont('helvetica', 'italic');
    doc.text(`Thank you for your business! - Generated by ${currentUser}`, pageWidth / 2, footerY, { align: 'center' });
    doc.text(`Page ${i} of ${pageCount}`, pageWidth - margin, footerY + 3, { align: 'right' });
  }

  doc.autoPrint({ variant: 'non-conform' });
  doc.output('dataurlnewwindow', { filename: `Bill-${order.orderNumber}.pdf` });
}